version: "3"

services:
  zookeeper:
    image: 'wurstmeister/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
#      ZOO_SERVERS: server.1=zookeeper:2888:3888;2181 server.2=zookeeper2:2888:3888;2181 server.3=zookeeper3:2888:3888;2181

#  zookeeper2:
#    image: zookeeper:3.9.0
#    ports:
#      - 2182:2181
#    environment:
#      ZOO_MY_ID: 2
#      ZOO_SERVERS: server.1=zookeeper:2888:3888;2181 server.2=zookeeper2:2888:3888;2181 server.3=zookeeper3:2888:3888;2181
#
#  zookeeper3:
#    image: zookeeper:3.9.0
#    ports:
#      - 2183:2181
#    environment:
#      ZOO_MY_ID: 3
#      ZOO_SERVERS: server.1=zookeeper:2888:3888;2181 server.2=zookeeper2:2888:3888;2181 server.3=zookeeper3:2888:3888;2181

  kafka:
    image: wurstmeister/kafka
    ports:
      - '9092:9092'
    volumes:
      - "kafka_data:/kafka"
#      - "./kafka-config:/opt/kafka/config/"
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=INTERNAL://kafka:29092,EXTERNAL://kafka:9092
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper

  mongo1:
    image: mongo:4.4
    ports:
      - 27017:27017
    links:
      - mongo2
      - mongo3
    restart: always
    volumes:
      - ./mongo/rs-init.sh:/scripts/rs-init.sh
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs" ]

  mongo2:
    image: mongo:4.4
    ports:
      - 27022:27017
    restart: always
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs" ]

  mongo3:
    image: mongo:4.4
    ports:
      - 27023:27017
    restart: always
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs" ]

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_URL: "mongodb://mongo1:27017?replicaSet=dbrs"

  postgres:
    image: postgres:15.4
    ports:
      - 5432:5432
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust

  connect:
    build:
      context: mongo
      dockerfile: connect.Dockerfile
    ports:
      - "35000:35000"
      - "8083:8083"
    depends_on:
      - zookeeper
      - kafka
      - mongo1
      - mongo2
      - mongo3
      - postgres
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: connect-cluster-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_CONNECTIONS_MAX_IDLE_MS: 180000
      CONNECT_METADATA_MAX_AGE_MS: 180000
      CONNECT_AUTO_CREATE_TOPICS_ENABLE: "true"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"

  stream:
    build: .
    ports:
      - 9000:8080
    depends_on:
      - kafka

volumes:
  kafka_data:
    driver: local